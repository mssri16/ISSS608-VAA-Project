[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üë®üèª‚Äçüíª Movie Analysis and Prediction üé¨üçø",
    "section": "",
    "text": "Overview:\nThe movie trend analysis tools are powerful software solutions designed to help individuals and organizations analyze the movie industry. By aggregating and processing large amounts of data from various sources, including box office results, movie ratings, social media engagement, and more, these tools present the data in a clear and concise format. Users can then quickly and easily identify trends and patterns, compare the performance of different films, analyze the success of specific genres, and even make predictions about future box office results. These tools are also customizable to meet the specific needs of a user or organization, with options for adjusting data sets, changing the format of reports, and adding custom calculations. Overall, movie trend analysis tools provide a comprehensive solution for anyone looking to gain a deeper understanding of the movie industry.\n\n\nVisual Analytics:\nVisual analytics is a data analysis approach that utilizes visual representations such as charts, graphs, and maps to gain insights and knowledge from data. By exploring and interacting with data using visualizations, users can identify patterns, relationships, and anomalies that may not be apparent from simply looking at raw data. Additionally, visual analytics can help to communicate findings more effectively by presenting complex data in a more understandable and intuitive way. Overall, the goal of visual analytics is to improve decision-making by enabling users to understand and explore data more effectively.\n\n\nProject:\nFor this project, the team will develop a Shiny app as an interface to access the visualizations of movie data and support decision-making. The app will allow users to explore different movie genres and analyze trends in revenue, budget, and ratings. Users can interact with the data and explore the correlations between different variables. The app will also include a predictive model that can forecast the box office revenue of a new movie based on its genre and budget. Overall, this project aims to provide a user-friendly platform for movie trend analysis that leverages the power of visual analytics to support decision-making in the movie industry.\n\n\nüìà Shiny App\n\n\nüìö User Guide\n\n\nüóÇÔ∏è Github\n\n\n\nWe are reachable at:\n\n\n\nMember\nEmail\n\n\n\n\nShi Chee Liang\nclshi.2022@mitb.smu.edu.sg\n\n\nSiddharth Singh\nsiddharths.2022@mitb.smu.edu.sg\n\n\nSrivatsan M Srinivasan\nsrivatsanms.2022@mitb.smu.edu.sg"
  },
  {
    "objectID": "Proposal/Proposal.html",
    "href": "Proposal/Proposal.html",
    "title": "ISSS608 - Group 13 - Project Proposal",
    "section": "",
    "text": "The movie industry is constantly evolving, with new films being produced and released every year. To understand the current state of the industry and predict future trends, movie trend analysis is an essential tool. By analyzing various data sources such as box office performance, critical reception, and audience demographics, analysts can gain insights into the popularity of different genres, production techniques, and marketing strategies. This information can then be used by film studios, production companies, and investors to make informed decisions about future projects. Additionally, movie trend analysis can help movie theaters and streaming platforms plan their schedules and allocate resources to maximize their profits. With the increasing amount of data being generated in the movie industry, movie trend analysis has become an important tool for staying ahead of the curve and predicting the next big hit."
  },
  {
    "objectID": "Proposal/Proposal.html#motivation",
    "href": "Proposal/Proposal.html#motivation",
    "title": "ISSS608 - Group 13 - Project Proposal",
    "section": "Motivation",
    "text": "Motivation\nThere are several motivations behind the development and use of movie trend analysis tools. These include:\n\nTo Improve Decision-Making: Movie trend analysis provide valuable insights into the current state of the movie industry, helping individuals and organizations make informed decisions about future projects.\nTo Identify Opportunities: By identifying trends and patterns in the data, movie trend analysis tools can help users identify new opportunities for success in the industry.\nTo Maximize Profits: By understanding the success factors of different films and genres, movie trend analysis tools can help movie theaters, production companies, and investors maximize their profits."
  },
  {
    "objectID": "Proposal/Proposal.html#objectives",
    "href": "Proposal/Proposal.html#objectives",
    "title": "ISSS608 - Group 13 - Project Proposal",
    "section": "Objectives",
    "text": "Objectives\nThe project was interested in the following problems.\n\nTo identify features of movies that are more popular in recent years. This can facilitate decision-making for companies that may be interested in investing in movie projects.\nTo apply regression models in an attempt to predict the ROI of a particular movie project given various feature data, like genre, budget, etc.\n(Dropped) To identify if the increasing popularity of Over-The-Top (OTT) services and implementation of COVID measures had impacted people‚Äôs movie viewing habits, over the past 5 years. This objective was subsequently dropped during development due to incomplete crucial data (we were missing data from 2021 to 2022) which was crucial as COIVD had help sped up the demand for OTT services. the team was also short on time due to difficulties in developing a correlation model for categorical and numerical values."
  },
  {
    "objectID": "Proposal/Proposal.html#data-set",
    "href": "Proposal/Proposal.html#data-set",
    "title": "ISSS608 - Group 13 - Project Proposal",
    "section": "Data Set",
    "text": "Data Set\nTo analyze and plot the required graphs, these are the data set and their description that our team will be exploring:\n\n‚Ä¢ ¬†Movies.csv: To retrieve all movie information like release year, box office revenue, etc.\n‚Ä¢ ¬†Multiple revenue.csv: revenue data of various major OTT Platforms, like Netflix, Hulu, and other major streaming apps in China, US and UK\n‚Ä¢ ¬†Multiple Subscriber.csv: subscription data of various major OTT Platforms, like Netflix, Hulu, and other major streaming apps in China, US and UK"
  },
  {
    "objectID": "Proposal/Proposal.html#project-visualizations",
    "href": "Proposal/Proposal.html#project-visualizations",
    "title": "ISSS608 - Group 13 - Project Proposal",
    "section": "Project Visualizations",
    "text": "Project Visualizations\nEDA\nthe project had intended to allows users to select different kinds of visualisation models as well as toggle the years to display how the various genres fared in terms of revenue. This flexibility for toggling attributes was intended to work like how JMP allows one to select different features to view.\nThe visualisations that the team finally decided on are:\n\nTime series line plots for Movie revenue, budget, gross profits by year\nBar Plots ranking of the number f movies released in a year for each genres.\n\n\nAnalysis\nOn a 2nd tab, we will allow the use to select various regression modeling techniques as well as toggle selected features to view the significance of the features on the ROI of movies.\nThe visualisations that the team ultimately decided on are:\n\nBox plots comparisons between Revenue and Genres\nBox plots comparisons between Budget and Genres\nBox plots comparisons between Revenue and Production Houses\nBox plots comparisons between Budget and Production Houses\n\n\nPrediction\nIn a final tab, we would like just 1 or 2 of the best regression model and allow the user to key in various parameters to determine if a movie would make money.\nFor Prediction, the team decided to show:\n\nThe final predicted value (in red) against a scatter plot of all the revenue\n\nThe prediction will take in up to 5 genres and a budget to predict the reveune.\n\nAnother bar plot is to show the historical means of revenue across all genres."
  },
  {
    "objectID": "CL/VAAProjCL.html",
    "href": "CL/VAAProjCL.html",
    "title": "VAA PRoject - SCL",
    "section": "",
    "text": "load packages\n\n\nShow the code\npacman::p_load(tidyverse, readr, lubridate, plotly)\n\n\nImport data\n\n\nShow the code\nmovie <- read_csv('data/movies.csv')\n\n\nFilter data\n\n\nShow the code\nmovie <- movie %>%\n  select('id', 'title', 'genres', 'original_language', 'popularity', 'production_companies', 'release_date', 'budget', 'revenue', 'runtime', 'status', 'vote_average', 'vote_count', 'credits', 'keywords')\n\n\nManipulate data\n\n\nShow the code\nmovie2 <- movie %>%\n  filter(complete.cases(.)) %>%\n  filter(status == \"Released\") %>%\n  filter(budget != \"0\") %>%\n  filter(revenue != \"0\") %>%\n  filter(runtime != \"0\") %>%\n  mutate(genres = lapply(strsplit(genres,\"-\"), as.list)) %>%\n  mutate(production_companies = lapply(strsplit(production_companies,\"-\"), as.list)) %>%\n  mutate(credits = lapply(strsplit(credits,\"-\"), as.list)) %>%\n  mutate(keywords = lapply(strsplit(keywords,\"-\"), as.list))\n\n\nCheck it\n\n\nShow the code\nglimpse(movie2)\n\n\n\n\nShow the code\n#change revenue to millions / thousands?\nmovie2 <- movie2 %>%\n  mutate(budget = as.numeric(budget)/1000000) %>%\n  mutate(revenue = as.numeric(revenue)/1000000)\n\n\nDate is in the correct format, don‚Äôt need to change\nAdd data\n\n\nShow the code\n#change date to year\nmovie2 <- movie2 %>% \n  mutate(release_year = year(as.Date(release_date)))\n\n\nDrop data\n\n\nShow the code\n#drop released\n\n\nCheck nulls\n\n\nShow the code\ncolSums(is.na(movie2))\n\n\nWrite to file\n\n\nShow the code\nwrite_rds(movie2, \"data/moviestidied.rds\")\n\n\nRead Back the file\n\n\nShow the code\nmovietidied <- read_rds(\"data/moviestidied.rds\")\n\n\n\n\nShow the code\nhead(movietidied)\n\n\n# A tibble: 6 √ó 16\n      id title  genres origi‚Ä¶¬π popul‚Ä¶¬≤ produ‚Ä¶¬≥ release_‚Ä¶‚Å¥ budget revenue runtime\n   <dbl> <chr>  <list> <chr>     <dbl> <list>  <date>      <dbl>   <dbl>   <dbl>\n1 505642 Black‚Ä¶ <list> en        3953. <list>  2022-11-09    250    855.     162\n2 315162 Puss ‚Ä¶ <list> en        3351. <list>  2022-12-07     90    442      103\n3 646389 Plane  <list> en        3337. <list>  2023-01-12     25     46      107\n4 631842 Knock‚Ä¶ <list> en        1677. <list>  2023-02-01     20     52      100\n5 536554 M3GAN  <list> en        1382. <list>  2022-12-28     12    168.     102\n6  76600 Avata‚Ä¶ <list> en        1332. <list>  2022-12-14    460   2267.     192\n# ‚Ä¶ with 6 more variables: status <chr>, vote_average <dbl>, vote_count <dbl>,\n#   credits <list>, keywords <list>, release_year <dbl>, and abbreviated\n#   variable names ¬π‚Äãoriginal_language, ¬≤‚Äãpopularity, ¬≥‚Äãproduction_companies,\n#   ‚Å¥‚Äãrelease_date\n\n\nEDA\n\n\nShow the code\n# Filter the dataset to only include the desired genre\nfiltercriteria <- c(\"Action\", \"Comedy\", \"Drama\")\n\n#unnest the data for filtering\nmovieEDA <- movietidied %>% \n  unnest(genres)%>%\n  mutate(genres = as.character(genres))\n\n#filter requiresd data\nmovieEDA <- movieEDA %>%\n  filter(genres %in% filtercriteria) %>% #remove this if filtering everything\n  group_by(genres, release_year) %>% \n  summarize(total_revenue = sum(revenue)) %>%\n  filter(release_year <= 2022)  # Filter data up to 2022\n\n# Create a line chart\nprevenue <- ggplot(movieEDA, aes(x = release_year, y = total_revenue, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  labs(title = \"Box Office Earnings by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Total Revenue\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\") #remove this for more colours\n\nggplotly(prevenue)\n\n\n\n\n\n\n\n\nShow the code\nfiltercriteria <- c(\"Action\", \"Comedy\", \"Drama\")\n\n#unnest the data for filtering\nmovieEDA <- movietidied %>% \n  unnest(genres)%>%\n  mutate(genres = as.character(genres))\n\n#filter requiresd data\nmovieEDA <- movieEDA %>%\n  filter(genres %in% filtercriteria) %>% #remove this if filtering everything\n  group_by(genres, release_year) %>% \n  summarize(total_budget = sum(budget)) %>%\n  filter(release_year <= 2022)  # Filter data up to 2022\n\n# Create a line chart\npbudget <- ggplot(movieEDA, aes(x = release_year, y = total_budget, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  labs(title = \"Budget by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Total Budget\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\") #remove this for more colours\n\nggplotly(pbudget)\n\n\n\n\n\n\n\n\nShow the code\n#unnest the data for filtering\nmovieEDA <- movietidied %>% \n  unnest(genres)%>%\n  mutate(genres = as.character(genres))\n\n#filter requiresd data\nmovieEDA <- movieEDA %>%\n  filter(genres %in% filtercriteria) %>% \n  group_by(genres, release_year) %>% \n  summarize(total_revenue = sum(revenue), total_budget = sum(budget)) %>%\n  filter(release_year <= 2022) %>% # Filter data up to 2022\n  mutate(percent_revenue_to_budget = round(total_revenue / total_budget * 100, 0)) # Compute percentage of revenue to budget and round to nearest integer\n\n# Create a line chart\npbudget <- ggplot(movieEDA, aes(x = release_year, y = total_budget, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  labs(title = \"Budget by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Total Budget\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\") #remove this for more colours\n\n# Create a line chart for percentage of revenue to budget\npgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = percent_revenue_to_budget, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  scale_y_continuous(limits = c(min(movieEDA$percent_revenue_to_budget), max(movieEDA$percent_revenue_to_budget)), expand = c(0,0)) +\n  labs(title = \"Percentage of Revenue to Budget by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Percentage of Revenue to Budget\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\") #remove this for more colours\n\n# Combine the two plots into one using plotly\nsubplot(pbudget, pgrossprofit, nrows = 2, titleY = TRUE, heights = c(0.7, 0.3))\n\n\n\n\n\n\n\n\nShow the code\n# Filter the dataset to only include the desired genre\nfiltercriteria <- c(\"Action\", \"Comedy\", \"Drama\")\n\n#unnest the data for filtering\nmovieEDA <- movietidied %>% \n  unnest(genres)%>%\n  mutate(genres = as.character(genres))\n\n#filter requiresd data\nmovieEDA <- movieEDA %>%\n  filter(genres %in% filtercriteria) %>%\n  group_by(genres, release_year) %>% \n  summarize(total_revenue = sum(revenue),\n            total_budget = sum(budget),\n            profit_pct = round((total_revenue - total_budget) / total_budget * 100)) %>%\n  filter(release_year <= 2022)  # Filter data up to 2022\n\n# Create a line chart\npgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = profit_pct, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n   scale_y_continuous(limits = c(-100, 400), breaks = seq(-100, 400, by = 100)) +\n  labs(title = \"Gross Profit Percentage by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Gross Profit Percentage\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\")\n\nggplotly(pgrossprofit)\n\n\n\n\n\n\n\n\nShow the code\n# Filter the dataset to only include the desired genre\nfiltercriteria <- c(\"Action\")\n\n# Unnest the data for filtering\nmovieEDA <- movietidied %>% \n  unnest(genres) %>%\n  mutate(genres = as.character(genres))\n\n# Filter required data\nmovieEDA <- movieEDA %>%\n  filter(genres %in% filtercriteria) %>% \n  group_by(genres, release_year) %>% \n  summarize(total_revenue = sum(revenue), total_budget = sum(budget)) %>%\n  filter(release_year <= 2022) %>% # Filter data up to 2022\n  mutate(percent_revenue_to_budget = round(total_revenue / total_budget * 100, 0)) # Compute percentage of revenue to budget and round to nearest integer\n\n# Create a line chart\np <- ggplot(movieEDA, aes(x = release_year)) +\n  geom_line(aes(y = total_budget, color = genres), size = 1.5) +\n  geom_line(aes(y = total_revenue, color = genres), size = 1.5, linetype = 2) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  labs(title = \"Budget and Revenue by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Amount\",\n       color = \"Genres\",\n       linetype = \"Revenue\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\") #remove this for more colours\n\n# Create a line chart for percentage of revenue to budget\npgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = percent_revenue_to_budget, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n     scale_y_continuous(limits = c(-50, 500), breaks = seq(-50, 500, by = 100)) +\n  labs(title = \"Percentage of Revenue to Budget by Genre and Year\",\n       subtitle = \"Showing trends for Action, Comedy, and Drama genres\",\n       x = \"Release Year\",\n       y = \"Percentage of Revenue to Budget\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_brewer(palette = \"Set1\") #remove this for more colours\n\n# Combine the two plots into one using plotly\nsubplot(p, pgrossprofit, nrows = 2, titleY = TRUE, heights = c(0.7, 0.3))\n\n\n\n\n\n\n\n\nShow the code\n# Filter the dataset to only include the desired genre\nfiltercriteria <- c(\"Action\")\n\n# Unnest the data for filtering\nmovieEDA <- movietidied %>% \n  unnest(genres) %>%\n  mutate(genres = as.character(genres))\n\n# Filter required data\nmovieEDA <- movieEDA %>%\n  filter(genres %in% filtercriteria) %>% \n  group_by(genres, release_year) %>% \n  summarize(total_revenue = sum(revenue), total_budget = sum(budget)) %>%\n  filter(release_year <= 2022) %>% # Filter data up to 2022\n  mutate(percent_revenue_to_budget = round(total_revenue / total_budget * 100, 0)) # Compute percentage of revenue to budget and round to nearest integer\n\n# Create a line chart\np <- ggplot(movieEDA, aes(x = release_year)) +\n  geom_line(aes(y = total_budget, color = genres), size = 1.5) +\n  geom_line(aes(y = total_revenue, color = genres), size = 1.5, linetype = 2) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  labs(title = \"Budget and Revenue by Genre and Year\",\n       subtitle = \"Showing trends for the Action genre\",\n       x = \"Release Year\",\n       y = \"Amount\",\n       color = \"Genres\",\n       linetype = \"Revenue\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_manual(values = \"red\") # Set the color for the Action genre to blue\n\n# Create a line chart for percentage of revenue to budget\npgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = percent_revenue_to_budget, color = genres)) +\n  geom_line(size = 1.5) +\n  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +\n  scale_y_continuous(limits = c(-50, 500), breaks = seq(-50, 500, by = 100)) +\n  labs(title = \"Percentage of Revenue to Budget by Genre and Year\",\n       subtitle = \"Showing trends for the Action genre\",\n       x = \"Release Year\",\n       y = \"Percentage of Revenue to Budget\",\n       color = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        plot.subtitle = element_text(size = 15),\n        plot.caption = element_text(size = 10),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10)) +\n  scale_color_manual(values = \"green\") # Set the color for the Action genre to blue\n\n# Combine the two plots into one using plotly\nsubplot(p, pgrossprofit, nrows = 2, titleY = TRUE, heights = c(0.7, 0.3))\n\n\n\n\n\n\n\n\nShow the code\n#FILTER FOR YEAR\nyear <- 2022\n\n# List of genres to include\ngenre_list <- c(\"Action\", \"Comedy\", \"Drama\", \"Thriller\", \"Horror\", \"Adventure\", \"Science Fiction\", \"Mystery\", \"Fantasy\", \"Animation\")\n\n# Get the count of movies released per year for each genre\nmovieEDA <- movietidied %>%\n  unnest(genres) %>%\n  mutate(genres = as.character(genres)) %>%\n  filter(release_year == year & genres %in% genre_list) %>%\n  group_by(genres) %>%\n  summarize(count = n()) %>%\n  arrange(desc(count))  # reorder the genres by count in descending order\n\n# Create a horizontal bar chart with a color palette\nggplot(movieEDA, aes(x = reorder(genres, count), y = count, fill = genres)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_fill_brewer(palette = \"Set3\") +  # set the color palette\n  labs(title = paste0(\"Number of Movies Released in \", year),\n       x = \"Count\",\n       y = \"Genres\") +\n  theme(plot.title = element_text(size = 20),\n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.text = element_text(size = 10),\n        legend.title = element_blank(),\n        legend.position = \"none\") +\n  coord_flip()  # flip the chart\n\n\n\n\n\nAnalysis\n\n\nShow the code\n# Load the data\n\n# Create a new column with the combined genres\nmovietidied$combined_genres <- sapply(movietidied$genres, paste, collapse = \", \")\n\n# Group the data by the combined genres and calculate the total revenue for each group\ngenre_revenue <- movietidied %>%\n  group_by(combined_genres) %>%\n  summarize(total_revenue = sum(revenue),\n            total_budget = sum(budget)) %>%\n  mutate(profit = total_revenue - total_budget) %>%\n  arrange(desc(profit))\n\n# Print the top 10 genre combinations by profit\nhead(genre_revenue, 10)\n\n\n# A tibble: 10 √ó 4\n   combined_genres                    total_revenue total_budget profit\n   <chr>                                      <dbl>        <dbl>  <dbl>\n 1 Action, Adventure, Science Fiction        21907.        5904. 16002.\n 2 Comedy                                    20316.        7080. 13236.\n 3 Adventure, Action, Science Fiction        15206.        2676. 12530.\n 4 Comedy, Romance                           16007.        4872. 11135.\n 5 Action, Adventure, Fantasy                13202.        4057.  9144.\n 6 Drama                                     13694.        5668.  8026.\n 7 Drama, Romance                            11280.        3763.  7517.\n 8 Adventure, Fantasy, Action                 8199.        1979.  6220.\n 9 Comedy, Drama, Romance                     8465.        2661.  5805.\n10 Adventure, Action, Thriller                6530.        1737.  4792.\n\n\nmaybe try Apriori algorithm"
  },
  {
    "objectID": "Proposal/Proposal.html#challenges-faced",
    "href": "Proposal/Proposal.html#challenges-faced",
    "title": "ISSS608 - Group 13 - Project Proposal",
    "section": "Challenges Faced",
    "text": "Challenges Faced\nProvided here is a list of challenges that team faced in the development of this project. this list provides an idea of what to expect and what could be done better if this project were to be revisited in the future.\n\nCorrelation between multiple categorical values and numerical values. Correleation traditionally works best with continous numerical values. while there are methods for carrying out this correleation today, they do not work well with our data sets. Here is an analysis of the reasons\n\nOur data has alot of categoriacal data like actors and production houses\nSome movies can have upwards of 60 actors and 3 production houses.\nAs we translate each o f this categorical values into numerical value by giving them a 1 or 0 flag for each movie, the data set size increases exponentialy both in terms of width and length. after converting unnesting all these variables, we ended up with 2.7million rows of data compared to the original 8k+. At one point, the system informed us that we required 27TB of memory to run the functions for correlation, which the team obviously failed to execute\n\nCollaboration with Github. From the team‚Äôs experience, using Github is causing us more trouble than it is helpful. while the team remains convinced that Github is a useful platform for teams to collaborate on a project, there must be pre-planning and ideally familiarity with how the platform works and how to troubleshoot it when it does not, otherwise more time could be wasted on trying to fix these issues and recover codes that were wrongly meshed.\nThe project requires diverse knowledge in multiple platforms and languages which required alot of time to get familiar with. Teams should start on such projects as early as possible. R was used in the data wrangling and analysis as well as visualisations. some Quarto and html knowledge is required for designing the webpage. Knowledge in Git commands may also be necessary for some troubleshooting."
  },
  {
    "objectID": "MeetingMinutes/MeetingMinutes.html",
    "href": "MeetingMinutes/MeetingMinutes.html",
    "title": "Meeting Minutes",
    "section": "",
    "text": "Meeting Minutes for this project can be found on below links:\n\n\n\nMeeting\nView Online\nDownload\n\n\n\n\n09th February 2023\nView\nDownload\n\n\n12th February 2023\nView\nDownload\n\n\n03rd March 2023\nView\nDownload\n\n\n13th March 2023\nView\nDownload\n\n\n28th March 2023\nView\nDownload"
  },
  {
    "objectID": "Poster/Poster.html",
    "href": "Poster/Poster.html",
    "title": "üë®üèª‚Äçüíª ISSS608_Jan2023_Group13-Movie Analysis and Prediction üé¨üçø",
    "section": "",
    "text": "[Download]"
  }
]
---
title: "VAA PRoject - SCL"
editor: visual
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    warning: false
    message: false
author: "Shi Chee Liang"
date: 10 March 2023
date-modified: "`r Sys.Date()`"
---

load packages

```{r}
pacman::p_load(tidyverse, readr, lubridate, plotly,ggstatsplot, crosstalk, DT, ggdist, gganimate, FunnelPlotR, knitr, gifski)
```

Import data

```{r}
#| eval: false
movie <- read_csv('data/movies.csv')
```

Filter data

```{r}
#| eval: false

movie <- movie %>%
  select('id', 'title', 'genres', 'original_language', 'popularity', 'production_companies', 'release_date', 'budget', 'revenue', 'runtime', 'status', 'vote_average', 'vote_count', 'credits', 'keywords')
```

Manipulate data -\> Split Training and Test Data

```{r}
#| eval: false

train_movie_data <- movie %>%
  filter(complete.cases(.)) %>%
  filter(status == "Released") %>%
  filter(budget != "0") %>%
  filter(revenue != "0") %>%
  filter(runtime != "0") %>%
  mutate(genres = lapply(strsplit(genres,"-"), as.list)) %>%
  mutate(production_companies = lapply(strsplit(production_companies,"-"), as.list)) %>%
  mutate(credits = lapply(strsplit(credits,"-"), as.list)) %>%
  mutate(keywords = lapply(strsplit(keywords,"-"), as.list))

train_movie_data$performance <- ifelse(train_movie_data$revenue/train_movie_data$budget >= 3, "Box Office Hit","Box Office Failure")
```

```{r}
#Splitting test data with the movie status Post Production

#| Eval = False

test_movie_data <- movie %>%
  filter(status == "Post Production") %>%
  mutate(genres = lapply(strsplit(genres,"-"), as.list)) %>%
  mutate(production_companies = lapply(strsplit(production_companies,"-"), as.list)) %>%
  mutate(credits = lapply(strsplit(credits,"-"), as.list)) %>%
  mutate(keywords = lapply(strsplit(keywords,"-"), as.list)) %>%
  mutate(budget = as.numeric(budget)/1000000) %>%
  mutate(revenue = as.numeric(revenue)/1000000) %>%
  mutate(release_year = year(as.Date(release_date)))
```

Check it

```{r}
#| eval: false
glimpse(train_movie_data)

```

```{r}
#| eval: false
#change revenue to millions / thousands?
train_movie_data <- train_movie_data %>%
  mutate(budget = as.numeric(budget)/1000000) %>%
  mutate(revenue = as.numeric(revenue)/1000000)
```

Date is in the correct format, don't need to change

Add data

```{r}
#| eval: false
#change date to year
train_movie_data <- train_movie_data %>% 
  mutate(release_year = year(as.Date(release_date)))
```

Drop data

```{r}
#| eval: false
#drop released
```

Check nulls

```{r}
#| eval: false
colSums(is.na(train_movie_data))

```

Write to file

```{r}
#| eval: false
write_rds(train_movie_data, "data/moviestidied.rds")

```

Read Back the file

```{r}
movietidied <- read_rds("data/moviestidied.rds")
```

```{r}
head(movietidied)
```

EDA

```{r}
# Filter the dataset to only include the desired genre
filtercriteria <- c("Action", "Comedy", "Drama")

#unnest the data for filtering
movieEDA <- movietidied %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))

#filter requiresd data
movieEDA <- movieEDA %>%
  filter(genres %in% filtercriteria) %>% #remove this if filtering everything
  group_by(genres, release_year) %>% 
  summarize(total_revenue = sum(revenue)) %>%
  filter(release_year <= 2022)  # Filter data up to 2022

# Create a line chart
prevenue <- ggplot(movieEDA, aes(x = release_year, y = total_revenue, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  labs(title = "Box Office Earnings by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Total Revenue",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1") #remove this for more colours

ggplotly(prevenue)

```

```{r}
filtercriteria <- c("Action", "Comedy", "Drama")

#unnest the data for filtering
movieEDA <- movietidied %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))

#filter requiresd data
movieEDA <- movieEDA %>%
  filter(genres %in% filtercriteria) %>% #remove this if filtering everything
  group_by(genres, release_year) %>% 
  summarize(total_budget = sum(budget)) %>%
  filter(release_year <= 2022)  # Filter data up to 2022

# Create a line chart
pbudget <- ggplot(movieEDA, aes(x = release_year, y = total_budget, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  labs(title = "Budget by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Total Budget",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1") #remove this for more colours

ggplotly(pbudget)
```

```{r}
#unnest the data for filtering
movieEDA <- movietidied %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))

#filter requiresd data
movieEDA <- movieEDA %>%
  filter(genres %in% filtercriteria) %>% 
  group_by(genres, release_year) %>% 
  summarize(total_revenue = sum(revenue), total_budget = sum(budget)) %>%
  filter(release_year <= 2022) %>% # Filter data up to 2022
  mutate(percent_revenue_to_budget = round(total_revenue / total_budget * 100, 0)) # Compute percentage of revenue to budget and round to nearest integer

# Create a line chart
pbudget <- ggplot(movieEDA, aes(x = release_year, y = total_budget, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  labs(title = "Budget by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Total Budget",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1") #remove this for more colours

# Create a line chart for percentage of revenue to budget
pgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = percent_revenue_to_budget, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  scale_y_continuous(limits = c(min(movieEDA$percent_revenue_to_budget), max(movieEDA$percent_revenue_to_budget)), expand = c(0,0)) +
  labs(title = "Percentage of Revenue to Budget by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Percentage of Revenue to Budget",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1") #remove this for more colours

# Combine the two plots into one using plotly
subplot(pbudget, pgrossprofit, nrows = 2, titleY = TRUE, heights = c(0.7, 0.3))

```

```{r}
# Filter the dataset to only include the desired genre
filtercriteria <- c("Action", "Comedy", "Drama")

#unnest the data for filtering
movieEDA <- movietidied %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))

#filter requiresd data
movieEDA <- movieEDA %>%
  filter(genres %in% filtercriteria) %>%
  group_by(genres, release_year) %>% 
  summarize(total_revenue = sum(revenue),
            total_budget = sum(budget),
            profit_pct = round((total_revenue - total_budget) / total_budget * 100)) %>%
  filter(release_year <= 2022)  # Filter data up to 2022

# Create a line chart
pgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = profit_pct, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
   scale_y_continuous(limits = c(-100, 400), breaks = seq(-100, 400, by = 100)) +
  labs(title = "Gross Profit Percentage by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Gross Profit Percentage",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1")

ggplotly(pgrossprofit)

```

```{r}
# Filter the dataset to only include the desired genre
filtercriteria <- c("Action")

# Unnest the data for filtering
movieEDA <- movietidied %>% 
  unnest(genres) %>%
  mutate(genres = as.character(genres))

# Filter required data
movieEDA <- movieEDA %>%
  filter(genres %in% filtercriteria) %>% 
  group_by(genres, release_year) %>% 
  summarize(total_revenue = sum(revenue), total_budget = sum(budget)) %>%
  filter(release_year <= 2022) %>% # Filter data up to 2022
  mutate(percent_revenue_to_budget = round(total_revenue / total_budget * 100, 0)) # Compute percentage of revenue to budget and round to nearest integer

# Create a line chart
p <- ggplot(movieEDA, aes(x = release_year)) +
  geom_line(aes(y = total_budget, color = genres), size = 1.5) +
  geom_line(aes(y = total_revenue, color = genres), size = 1.5, linetype = 2) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  labs(title = "Budget and Revenue by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Amount",
       color = "Genres",
       linetype = "Revenue") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1") #remove this for more colours

# Create a line chart for percentage of revenue to budget
pgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = percent_revenue_to_budget, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
     scale_y_continuous(limits = c(-50, 500), breaks = seq(-50, 500, by = 100)) +
  labs(title = "Percentage of Revenue to Budget by Genre and Year",
       subtitle = "Showing trends for Action, Comedy, and Drama genres",
       x = "Release Year",
       y = "Percentage of Revenue to Budget",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_brewer(palette = "Set1") #remove this for more colours

# Combine the two plots into one using plotly
subplot(p, pgrossprofit, nrows = 2, titleY = TRUE, heights = c(0.7, 0.3))

```

```{r}
# Filter the dataset to only include the desired genre
filtercriteria <- c("Action")

# Unnest the data for filtering
movieEDA <- movietidied %>% 
  unnest(genres) %>%
  mutate(genres = as.character(genres))

# Filter required data
movieEDA <- movieEDA %>%
  filter(genres %in% filtercriteria) %>% 
  group_by(genres, release_year) %>% 
  summarize(total_revenue = sum(revenue), total_budget = sum(budget)) %>%
  filter(release_year <= 2022) %>% # Filter data up to 2022
  mutate(percent_revenue_to_budget = round(total_revenue / total_budget * 100, 0)) # Compute percentage of revenue to budget and round to nearest integer

# Create a line chart
p <- ggplot(movieEDA, aes(x = release_year)) +
  geom_line(aes(y = total_budget, color = genres), size = 1.5) +
  geom_line(aes(y = total_revenue, color = genres), size = 1.5, linetype = 2) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  labs(title = "Budget and Revenue by Genre and Year",
       subtitle = "Showing trends for the Action genre",
       x = "Release Year",
       y = "Amount",
       color = "Genres",
       linetype = "Revenue") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_manual(values = "red") # Set the color for the Action genre to blue

# Create a line chart for percentage of revenue to budget
pgrossprofit <- ggplot(movieEDA, aes(x = release_year, y = percent_revenue_to_budget, color = genres)) +
  geom_line(size = 1.5) +
  scale_x_continuous(limits = c(year(Sys.Date()) - 10, year(Sys.Date()) - 1), breaks = seq(year(Sys.Date()) - 10, year(Sys.Date()), by = 1)) +
  scale_y_continuous(limits = c(-50, 500), breaks = seq(-50, 500, by = 100)) +
  labs(title = "Percentage of Revenue to Budget by Genre and Year",
       subtitle = "Showing trends for the Action genre",
       x = "Release Year",
       y = "Percentage of Revenue to Budget",
       color = "Genres") +
  theme(plot.title = element_text(size = 20),
        plot.subtitle = element_text(size = 15),
        plot.caption = element_text(size = 10),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)) +
  scale_color_manual(values = "green") # Set the color for the Action genre to blue

# Combine the two plots into one using plotly
subplot(p, pgrossprofit, nrows = 2, titleY = TRUE, heights = c(0.7, 0.3))

```

```{r}
#FILTER FOR YEAR
year <- 2022

# List of genres to include
genre_list <- c("Action", "Comedy", "Drama", "Thriller", "Horror", "Adventure", "Science Fiction", "Mystery", "Fantasy", "Animation")

# Get the count of movies released per year for each genre
movieEDA <- movietidied %>%
  unnest(genres) %>%
  mutate(genres = as.character(genres)) %>%
  filter(release_year == year & genres %in% genre_list) %>%
  group_by(genres) %>%
  summarize(count = n()) %>%
  arrange(desc(count))  # reorder the genres by count in descending order

# Create a horizontal bar chart with a color palette
ggplot(movieEDA, aes(x = reorder(genres, count), y = count, fill = genres)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_brewer(palette = "Set3") +  # set the color palette
  labs(title = paste0("Number of Movies Released in ", year),
       x = "Count",
       y = "Genres") +
  theme(plot.title = element_text(size = 20),
        axis.title = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.title = element_blank(),
        legend.position = "none") +
  coord_flip()  # flip the chart


```

Analysis

```{r}
# Load the data

# Create a new column with the combined genres
movietidied$combined_genres <- sapply(movietidied$genres, paste, collapse = ", ")

# Group the data by the combined genres and calculate the total revenue for each group
genre_revenue <- movietidied %>%
  group_by(combined_genres) %>%
  summarize(total_revenue = sum(revenue),
            total_budget = sum(budget)) %>%
  mutate(profit = total_revenue - total_budget) %>%
  arrange(desc(profit))

# Print the top 10 genre combinations by profit
head(genre_revenue, 10)
```

```{r}
# Create a new column with the combined genres
movietidied$combined_genres <- sapply(movietidied$genres, paste, collapse = ", ")

# Group the data by the combined genres
genre_revenue <- movietidied %>%
  group_by(combined_genres) %>%
  arrange(desc(revenue))

# Print the top 10 genre combinations by revenue
head(genre_revenue, 10)

```

## Hypothesis Testing

Anova

```{r}


# perform ANOVA test
result <- aov(popularity ~ original_language, data = train_movie_data)
summary(result)

```

```{r}

sample_train_movie_data <- train_movie_data %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))  %>% 
  unnest(production_companies)%>%
  mutate(genres = as.character(production_companies))  %>% 
  unnest(credits)%>%
  mutate(genres = as.character(credits))


sample_train_movie_data <- subset(sample_train_movie_data, select = c("id","title","genres","original_language","popularity","production_companies","release_date","budget","revenue","runtime","status","vote_average","vote_count","credits","performance","release_year"))

#sample_train_movie_data$genres <- sapply(sample_train_movie_data$genres, "[[", 1)

#sample_train_movie_data$production_companies <- sapply(sample_train_movie_data$production_companies, "[[", 1)


# perform ANOVA test
#result <- aov(popularity ~ genres, data = sample_train_movie_data)
#summary(result)
```

```{r}

sample_test_movie_data <- test_movie_data %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))  %>% 
  unnest(production_companies)%>%
  mutate(genres = as.character(production_companies))  %>% 
  unnest(credits)%>%
  mutate(genres = as.character(credits))


sample_test_movie_data <- subset(sample_test_movie_data, select = c("id","title","genres","original_language","popularity","production_companies","release_date","budget","revenue","runtime","status","vote_average","vote_count","credits","release_year"))
```

```{r}
# select the columns to be used in clustering
#movie_subset <- sample_train_movie_data[, c("popularity","budget","revenue")]



# Load the required libraries
#library(ggplot2)
#library(cluster)

# Load the data
#data <- movie_subset

# Standardize the data
#scaled_data <- scale(data)

# Perform k-means clustering with k=3
#kmeans_model <- kmeans(scaled_data, 5)

# Extract the cluster assignments
#clusters <- kmeans_model$cluster

# Add the cluster assignments to the original data
#data$cluster <- clusters

# Generate a scatter plot of the first two variables colored by cluster
#ggplot(data, aes(x = budget, y = revenue, color = factor(cluster))) + 
  #geom_point(size = 3) +
  #labs(title = "K-Means Clustering with k=3") +
  #theme_bw()


```

```{r}
#plot_ly(data, x = ~budget, y = ~revenue, color = ~factor(cluster), 
              #text = ~paste(
                            #"Cluster: ", factor(cluster), "<br>"),
              #hoverinfo = "text", mode = "markers") %>%
     #layout(title = "K-Means Clustering with k=3", 
            #xaxis = list(title = "Sepal Length"), 
            #yaxis = list(title = "Sepal Width"))
```

```{r}
library(cluster)
library(factoextra)
library(klaR)
#sample_train_movie_data <- subset(sample_train_movie_data, select = c("id","title","genres","original_language","popularity","production_companies","release_date","budget","revenue","runtime","status","vote_average","vote_count","release_year"cred,"performance"))
#create plot of number of clusters vs total within sum of squares
fviz_nbclust(sample_train_movie_data, kmodes, method = "wss")


```

```{r}
library(klaR)

# create sample data
data <- sample_train_movie_data

# apply k-modes clustering
km <- kmodes(data, 5)

sample_train_movie_data$cluster <- km$cluster
# print cluster membership for each observation
#print(km$cluster)

# print cluster centroids
#print(km$centers)

```

```{r}
plot_ly(sample_train_movie_data, x = ~budget, y = ~revenue, color = ~factor(cluster), 
              text = ~paste(
                            "Cluster: ", factor(cluster), "<br>"),
              hoverinfo = "text", mode = "markers") %>%
     layout(title = "K-Means Clustering with k=3", 
            xaxis = list(title = "Sepal Length"), 
            yaxis = list(title = "Sepal Width"))

```

```{r}
library(ggplot2)
library(ggfortify)

# assuming the cluster results are stored in a variable named 'kmodes_clusters'


# plot clusters
ggplot(sample_train_movie_data, aes(x = budget, y = revenue, color = as.factor(cluster))) + 
  geom_point() + 
  theme_classic()

```

```{r}
ggstatsplot::ggcorrmat(
  data = sample_train_movie_data, 
  cor.vars = c("popularity","budget","revenue","runtime","vote_average","vote_count"))
```

```{r}
sample_train_movie_data$bin_performance <- ifelse(sample_train_movie_data$revenue/sample_train_movie_data$budget >=3, 1, 0)
```

```{r}
model <- glm(bin_performance ~ ., data = sample_train_movie_data, family = binomial)

# Print the summary of the model
summary(model)

# Make predictions on new data
#probabilities <- predict(model, newdata, type = "response")
```

```{r}
train_probabilities <- predict(model, sample_train_movie_data, type = "response")

sample_train_movie_data$performance_probabilities <- train_probabilities
```

```{r}

probabilities <- predict(model, sample_test_movie_data, type = "response")
```

```{r}
test_movie_data$performance <- probabilities
```

```{r}
# Load the necessary libraries
library(dplyr)
library(ggplot2)
library(car)

# Read the movie data from a CSV file
movies <- sample_train_movie_data

# Perform a two-way ANOVA analysis
model <- aov(revenue ~ budget + genre + production_company + genre:production_company, data = movies)

# Summarize the ANOVA results
summary(model)

# Visualize the ANOVA results
ggplot(movies, aes(x = genre, y = revenue, fill = production_company)) +
  geom_boxplot() +
  labs(title = "Revenue by Genre and Production Company") +
  theme(plot.title = element_text(hjust = 0.5)) +
  facet_wrap(~genre)

# Check for assumptions of ANOVA
# Check for homogeneity of variance
leveneTest(revenue ~ genre * production_company, data = movies)

# Check for normality
qqPlot(resid(model), main = "Normal Q-Q Plot of Residuals")

# Tukey's post-hoc test for pairwise comparisons
TukeyHSD(model)
```

Prediction

```{r}
movie_genres <- movietidied %>% 
  unnest(genres)%>%
  mutate(genres = as.character(genres))

movie_genres <- movie_genres %>%
  select(title, genres, revenue)
```

```{r}
movie_genres <- movietidied %>%
  select(combined_genres, revenue, budget)
```

```{r}
# Compute correlation coefficients between actors/production houses and box office earnings
genres_cor <- cor(movie_genres$revenue, as.numeric(movie_genres$combined_genres))

```

```{r}
# Fit multiple linear regression model
model <- lm(revenue ~ combined_genres, data = movie_genres)

```

```{r}
# Predict box office earnings for new movie
new_movie <- data.frame(genres = c("Action"))
pred_earnings <- predict(model, newdata = new_movie)

pred_earnings
```

```{r}
  movie_genres <- genre_revenue %>%
    select(combined_genres, revenue, budget)
```

```{r}
# Compute the correlation matrix
correlations <- cor(movie_genres[, c("revenue", "budget")], as.numeric(movie_genres$combined_genres))

# Print the correlation matrix
print(correlations)

```

```{r}
# check for NAs in the revenue and budget columns
sum(is.na(movie_genres$revenue))
sum(is.na(movie_genres$budget))

```

```{r}
movie_genres <- genre_revenue %>%
  select(combined_genres, revenue, budget)

# Convert combined_genres to a factor and then to a numeric
movie_genres$combined_genres <- as.numeric(as.factor(movie_genres$combined_genres))

# Compute the correlation matrix
correlations <- cor(movie_genres[, c("revenue", "budget")], as.numeric(movie_genres$combined_genres))

# Print the correlation matrix
print(correlations)

```

```{r}
# Create a new column with the combined genres
movietidied$combined_genres <- sapply(movietidied$genres, paste, collapse = ", ")

# Compute the correlation between combined genres and revenue
correlations <- cor(movietidied$revenue, as.numeric(movietidied$combined_genres), use="complete.obs")
print(correlations)

```

```{r}
# Create a subset of the data with only the columns of interest
movie_genres <- movietidied[, c("combined_genres", "revenue", "budget")]

# Remove rows with missing values
movie_genres <- movie_genres[complete.cases(movie_genres), ]

# Compute the correlation matrix
correlations <- cor(movie_genres[, c("revenue", "budget")], as.numeric(movie_genres$combined_genres))

# Print the correlation matrix
print(correlations)

```

```{r}
# Prepare the data
movie_data <- movietidied %>%
  select(budget, genres, revenue) %>%
  filter(!is.na(budget) & !is.na(genres) & !is.na(revenue)) %>%
  mutate(genres = strsplit(genres, "\\|")) %>%
  unnest(genres) %>%
  mutate(genre_binary = 1) %>%
  spread(key = genres, value = genre_binary, fill = 0)

# Split the data into training and test sets
set.seed(123)
train_index <- sample(nrow(movie_data), 0.7 * nrow(movie_data))
train_data <- movie_data[train_index, ]
test_data <- movie_data[-train_index, ]

# Train the model
model <- lm(revenue ~ budget + ., data = train_data)

# Evaluate the model
test_predictions <- predict(model, newdata = test_data)
mse <- mean((test_predictions - test_data$revenue)^2)
r_squared <- summary(model)$r.squared

# Use the model to make predictions
new_movie_budget <- 50000000
new_movie_genres <- c("Action", "Comedy")
new_movie_genres_binary <- movie_data %>% 
  select(-c(budget, revenue)) %>%
  colnames() %>%
  str_subset(new_movie_genres) %>%
  as.numeric()
new_movie_data <- data.frame(budget = new_movie_budget, new_movie_genres_binary)
predicted_revenue <- predict(model, newdata = new_movie_data)

```

```{r}
library(dplyr)

movie_data <- movietidied %>%
  select(id, budget, genres, revenue) %>%
  unnest(genres) %>%
  mutate(genres = as.character(genres)) %>%
  group_by(id, budget, revenue) %>%
  summarize(genres_combined = paste(genres, collapse = "|"))

movie_data <- movie_data %>%
  separate(genres_combined, into = paste0("genre_", 1:5), sep = "\\|", fill = "right", remove = FALSE) %>%
  mutate(across(starts_with("genre_"), ~ifelse(is.na(.), 0, 1))) %>%
  select(-genres_combined)

# fit linear regression model
model <- lm(revenue ~ budget + genre_1 + genre_2 + genre_3 + genre_4 + genre_5, data = movie_data)

# print model summary
summary(model)

```

```{r}
library(tidyr)
library(dplyr)

movie_data <- movietidied %>%
  select(id, budget, genres, revenue) %>%
  unnest(genres) %>%
  mutate(genres = as.character(genres)) %>%
  group_by(id, budget, revenue) %>%
  summarize(genres_combined = paste(genres, collapse = "|"))

# fit linear regression model
model <- lm(revenue ~ budget + ., data = movie_data)

# print model summary
summary(model)

```

```{r}
movie_data <- movietidied %>%
  select(id, budget, genres, revenue) %>%
  unnest(genres) %>%
  mutate(genres = as.character(genres)) %>%
  group_by(id, budget, revenue) %>%
  summarize(genres_combined = paste(genres, collapse = "|"))

movie_data <- movie_data %>%
  separate(genres_combined, into = paste0("genre_", 1:5), sep = "\\|", fill = "right", remove = FALSE) %>%
  mutate(across(starts_with("genre_"), ~ifelse(is.na(.), 0, 1))) %>%
  select(-genres_combined)
```

```{r}
library(tidyr)
library(dplyr)

# convert list of strings to separate rows
movie_data <- movietidied %>%
  select(id, budget, genres, revenue) %>%
  unnest(genres) %>%
  mutate(genres = as.character(genres))

# pivot wider to create dummy variables for each genre
movie_data <- movie_data %>%
  pivot_wider(names_from = genres, values_from = genres, values_fn = length, values_fill = 0)

# fit linear regression model
model <- lm(revenue ~ budget + ., data = movie_data)

# print model summary
summary(model)

```

```{r}
# create a data frame with new movie information
new_movie <- data.frame(budget = 50, 
                        Action = 1, 
                        Adventure = 0,
                        `Science Fiction` = 0,
                        Comedy = 1, 
                        Drama = 0, 
                        Romance = 0,
                        Animation = 0,
                        Thriller = 0,
                        Horror = 0,
                        Mystery = 0,
                        Fantasy = 0,
                        War = 0,
                        History = 0,
                        Family = 0,
                        Crime =0,
                        Music = 0,
                        Western = 0,
                        `TV Movie` = 0,
                        Documentary = 0,
                        id = 12345
                        )

# add space to column name
names(new_movie)[4] <- "Science Fiction"
names(new_movie)[19] <- "TV Movie"

# make prediction with fitted model
new_revenue <- predict(model, new_movie)

# print predicted revenue
print(new_revenue)

```

```{r}
# Create a vector of predicted revenue and movie names
movie_names <- c("New Movie")
predicted_revenue <- c(new_revenue)

# Create a bar plot
barplot(predicted_revenue, names.arg = movie_names, main = "Predicted Revenue for New Movie", ylab = "Revenue (in millions)")

```

```{r}
# Load ggplot2 package
library(ggplot2)

# Create a scatter plot
ggplot(movie_data, aes(x = budget, y = revenue)) +
  geom_point() +
  ggtitle("Budget vs Revenue") +
  xlab("Budget (in millions)") +
  ylab("Revenue (in millions)") +

# Add a point for the new movie
geom_point(aes(x = 50, y = new_revenue), color = "red", size = 3)

```

```{r}
library(ggplot2)

# Bar chart of mean revenue by genre
genre_revenue <- movie_data %>%
  pivot_longer(cols = Action:Documentary, names_to = "genre", values_to = "is_genre") %>%
  filter(is_genre == 1) %>%
  group_by(genre) %>%
  summarize(mean_revenue = mean(revenue, na.rm = TRUE))

genre_revenue_plot <- ggplot(genre_revenue, aes(x = genre, y = mean_revenue, fill = genre)) +
  geom_bar(stat = "identity") +
  labs(x = "Genre", y = "Mean Revenue", title = "Mean Revenue by Genre") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme_minimal() +
  theme(legend.position = "none") +
  coord_flip()

ggplotly(genre_revenue_plot)

# Scatter plot of budget vs revenue
budget_revenue_plot <- ggplot(movie_data, aes(x = budget, y = revenue, color = factor(Action))) +
  geom_point(alpha = 0.5) +
  labs(x = "Budget", y = "Revenue", title = "Budget vs. Revenue by Action Genre") +
  scale_color_discrete(name = "Action Genre") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme_minimal() +
  # Add a point for the new movie
  geom_point(aes(x = 50, y = new_revenue), color = "red", size = 3)

ggplotly(budget_revenue_plot)

```

```{r}
library(ggplot2)
library(plotly)

# Define genre colors
genre_colors <- c(
  "Action" = "#E69F00",
  "Adventure" = "#56B4E9",
  "Science Fiction" = "#009E73",
  "Comedy" = "#F0E442",
  "Drama" = "#0072B2",
  "Romance" = "#D55E00",
  "Animation" = "#CC79A7",
  "Thriller" = "#999999",
  "Horror" = "#000000",
  "Mystery" = "#8A2BE2",
  "Fantasy" = "#A5694F",
  "War" = "#85929E",
  "History" = "#F4D03F",
  "Family" = "#76D7C4",
  "Crime" = "#2E4053",
  "Music" = "#C0392B",
  "Western" = "#CD5C5C",
  "TV Movie" = "#6D4C41",
  "Documentary" = "#ECF0F1"
)

# Bar chart of mean revenue by genre
genre_revenue <- movie_data %>%
  pivot_longer(cols = Action:Documentary, names_to = "genre", values_to = "is_genre") %>%
  filter(is_genre == 1) %>%
  group_by(genre) %>%
  summarize(mean_revenue = mean(revenue, na.rm = TRUE))

genre_revenue_plot <- ggplot(genre_revenue, aes(x = genre, y = mean_revenue, fill = genre)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = genre_colors) +
  labs(x = "Genre", y = "Mean Revenue", title = "Mean Revenue by Genre") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme_minimal() +
  theme(legend.position = "none") +
  coord_flip()

genre_revenue_plot

# Scatter plot of budget vs revenue
budget_revenue_plot <- ggplot(movie_data, aes(x = budget, y = revenue, color = factor(Action))) +
  geom_point(alpha = 0.5) +
  scale_color_manual(values = genre_colors) +
  labs(x = "Budget", y = "Revenue", title = "Budget vs. Revenue by Action Genre") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme_minimal() +
  # Add a point for the new movie
  geom_point(aes(x = 50, y = new_revenue), color = "red", size = 3)

budget_revenue_plot

```
